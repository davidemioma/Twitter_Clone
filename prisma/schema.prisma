// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//npm i -D prisma
//npx prisma init
//npx prisma generate - Do this after creating a new model
//npx prisma db push - to push to your database.
//npx prisma migrate reset - to reset your databse.
//npx prisma studio - to view your data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String? 
  username String? @unique
  email String? @unique
  emailVerified DateTime?
  bio String?
  image String?
  coverImage String?
  profileImage String?
  hashedPassword String?
  hasNotification Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followersIds String[]  @db.ObjectId
  followingsIds String[]  @db.ObjectId

  likedPostIds String[] @db.ObjectId
  likedPosts Post[] @relation("liked", fields: [likedPostIds], references: [id])

  posts Post[]
  notifications Notification[]
  convosInitiated Conversation[] @relation("MemberOne")
  convosReceived Conversation[] @relation("MemberTwo")
  messages Message[]
}

model Post{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  parentId String? @db.ObjectId
  isChild Boolean @default(false)
  body String
  image String
  likedIds String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  liked User[] @relation("liked", fields: [likedIds], references: [id])
}

model Notification{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  body String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  memberOneId String @db.ObjectId
  memberTwoId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberOne User @relation("MemberOne", fields: [memberOneId],references: [id], onDelete: Cascade)
  memberTwo User @relation("MemberTwo", fields: [memberTwoId],references: [id], onDelete: Cascade)

  messages Message[]

  @@unique([memberOneId, memberTwoId])
}

model Message{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  conversationId String @db.ObjectId
  body String?
  image String?
  seenIds String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
